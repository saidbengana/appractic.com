// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts             Post[]    // Relation to posts
  metrics           Metric[]  // Relation to metrics
  audience          Audience[] // Relation to audience metrics

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]    // Relation to posts
  tags          Tag[]     // Relation to tags
}

model Post {
  id              String      @id @default(cuid())
  userId          String
  accountId       String
  status          Int         @default(0) // 0: draft, 1: scheduled, 2: published
  scheduleStatus  Int         @default(0) // 0: pending, 1: processing, 2: processed
  scheduledAt     DateTime?
  publishedAt     DateTime?
  content         Json?       // Store post content including text and media
  errors          Json?       // Store any publishing errors
  providerPostId  String?     // ID from the social media provider after publishing
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  account         Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  tags            Tag[]       // Many-to-many relation with tags
  media           Media[]     // Many-to-many relation with media
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([accountId])
  @@index([status])
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  hexColor  String   @db.Char(6)
  userId    String
  posts     Post[]   // Many-to-many relation with posts
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

model Media {
  id          String   @id @default(cuid())
  name        String
  mimeType    String
  disk        String   @default("local")
  path        String
  size        BigInt
  sizeTotal   BigInt   // Including converted versions
  conversions Json?    // Store converted versions info
  posts       Post[]   // Many-to-many relation with posts
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Metric {
  id        String   @id @default(cuid())
  accountId String
  data      Json     // Store various metrics (likes, shares, etc.)
  date      DateTime
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@index([accountId])
  @@index([date])
}

model Audience {
  id        String   @id @default(cuid())
  accountId String
  total     Int      @default(0)
  date      DateTime
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, date])
  @@index([accountId])
  @@index([date])
}
